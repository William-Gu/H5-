javascript面向对象：
 * 技术结构：
   * 高级内容
     * 代码具有通用性
     * 代码结构优化
   * 面向对象
     * 万物皆对象（在我们眼里一切都是对象）
     * 对象一定具有属性和方法
       * 属性：用于描述该对象的特征
       * 方法：用于描述该对象的行为
     * 定义变量（window对象的属性）
   * 定义对象的三种方式：
     * 直接量方式：
       var object = {
		属性名 : 属性值,
		方法名 : function(形参){}
       }
     * new Object - 创建一个空对象
       var object = new Object();
       object.属性名 = 属性值;
       object.方法名 = function(形参){}
     * 对象模板（构造器、构造函数）
       function 模板名称(形参){
		this.属性名 = 属性值;
		this.方法名 = function(形参){}
       }
   * 特殊的概念：
     * 封装：
        * 只关心输入和输出，而不关心如何实现
     * 重写：
        * 子构造器重写父构造器
     * 重载：模拟重载
   * 主要的内容：
     * 闭包：函数可以使用函数之外定义的变量
        * 闭包没有固定结构
	* 条件：
	  * 在全局调用内部函数
	  * 定义一个局部变量
	  * 内部函数使用局部变量
     * 原型：prototype属性
        * 为构造器扩展属性和方法
	* 实现重写：自有属性与原型属性同名，自有属性优先级更高
	* 为内部对象扩展属性和方法
     * 继承
 * 特殊函数
   * 匿名函数：没有名函数
     * 回调函数：一个函数作为另一个函数的参数存在
     * 自调函数：定义即调用（不需编写调用体）
   * 内部函数：定义在全局函数的函数